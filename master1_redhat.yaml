---
- name: Setup Master1 MariaDB server, Enable Binary Log and Gather Data to setup replication for use by the Slave
  hosts: master1
  become: yes
  become_method: sudo
  remote_user: ec2-user
  vars:
        ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Get latest Linux package updates
      ansible.builtin.yum:
        update_cache: yes


    - name: Install mariadb
      ansible.builtin.yum:
        name: mariadb-server
        state: present


    - name: Start mariadb service
      command: sudo systemctl start mariadb


    - name: Enable mariadb service
      command: sudo systemctl enable mariadb


    - name: Install python3-pip
      ansible.builtin.yum:
        name: python3-pip
        state: present


    - name: Install PyMySQL
      ansible.builtin.pip:
        name: PyMySQL
        state: present


    - name: Install pexpect
      ansible.builtin.pip:
        name: pexpect
        state: present


    - name: Secure mariadb installation
      expect:
        command: sudo mysql_secure_installation
        responses:
          'Enter current password for root \(enter for none\):': "\n"
          'Switch to unix_socket authentication \[Y/n\]': n
          'Change the root password\? \[Y/n\]': "y"
          'New password:': "{{mysql_pass}}"
          'Re-enter new password:': "{{mysql_pass}}"
          'Remove anonymous users\? \[Y/n\]': "y"
          'Disallow root login remotely\? \[Y/n\]': "n"
          'Remove test database and access to it\? \[Y/n\]': "y"
          'Reload privilege tables now\? \[Y/n\]': "y"
        echo: yes
  

    - name: Add [mysqld] on /etc/my.cnf
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        line: "[mysqld]"
        create: yes


    - name: Change the bind-address from localhost to 0.0.0.0 on /etc/my.cnf
      replace:
        path: "/etc/my.cnf"
        regexp: "127.0.0.1"
        replace: "0.0.0.0"
        backup: yes


    - name: Add server-id information on /etc/my.cnf
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        line: "server-id=1"
        create: yes


    - name: Add log_bin information on /etc/my.cnf
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        line: "log_bin=mysql-bin"
        create: yes


    - name: Add max_binlog_size information on /etc/my.cnf
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        line: "binlog-format=ROW"
        create: yes


    - name: Restart mariadb service
      command: sudo systemctl restart mariadb
      failed_when: false


    - name: Install firewalld
      ansible.builtin.yum:
        name: firewalld
        state: present


    - name: Start firewalld service
      command: sudo systemctl start firewalld


    - name: Enable firewalld service
      command: sudo systemctl enable firewalld


    - name: Open FW port 3306/tcp
      command: sudo firewall-cmd --add-port=3306/tcp --zone=public --permanent


    - name: Firewalld reload
      command: sudo firewall-cmd --reload


    - name: Verify mariadb application is listening on TCP port 3306
      shell: sudo ss -l -n -p | egrep "Netid|:3306"
      register: mysql
    - debug:
        var: mysql.stdout_lines


    - name: Create Replication User and Permission on Master Node
      community.mysql.mysql_user:
        login_user: "root"
        login_password: "{{mysql_pass}}"
        name: replication
        host: "%"
        password: "{{repl_pass}}"
        priv: "*.*:REPLICATION SLAVE"
        state: present


    - name: Verify Master Status
      command: sudo mysql -e "SHOW MASTER STATUS"
      register: binpos
 
    - set_fact:
          bn: "{{binpos.stdout_lines[1] | regex_search('^mysql-bin.\\d+')}}"


    - name: Getting Binary Log Filename
      shell: echo {{bn}} > binlog_name_master1.txt


    - name: Saving  Binary Log Filename
      command: cat binlog_name_master1.txt
      register: BinaryLogFileName
    - debug:
        var: BinaryLogFileName.stdout


    - name: Sending Filename Information To Control Node For Later Use in Slave Configuration
      run_once: yes
      fetch: src=/home/ec2-user/binlog_name_master1.txt dest=buffer/ flat=yes
      when: "inventory_hostname == 'ec2-54-91-112-111.compute-1.amazonaws.com'"

    - set_fact:
          bp: "{{binpos.stdout_lines | regex_search('\\\\t\\d+')}}"

    - set_fact:
          bp1: "{{bp | regex_search('\\d+')}}"


    - name: Getting Binary Log Filename and Position
      shell: echo {{bp1}} > binlog_position_master1.txt


    - name: Saving  Binary Log Filename and Position
      command: cat binlog_position_master1.txt
      register: BinaryLogPosition
    - debug:
        var: BinaryLogPosition.stdout


    - name: Sending Position Information To Control Node For Later Use in Slave Configuration
      run_once: yes
      fetch: src=/home/ec2-user/binlog_position_master1.txt dest=buffer/ flat=yes
      when: "inventory_hostname == 'ec2-54-91-112-111.compute-1.amazonaws.com'"


    - name: Running "ip addr"
      shell: ip add | grep eth0
      register: interface

    - set_fact:
          ip1: "{{interface.stdout_lines | regex_search('([0-9]{1,3}[\\.]){3}[0-9]{1,3}')}}"


    - name: Getting Master Host IPv4 Address
      shell: echo {{ip1}} > ipv4_master1.txt


    - name: Saving Master Host IPv4 Address
      command: cat ipv4_master1.txt
      register: MasterNodeIPV4
    - debug:
        var: MasterNodeIPV4.stdout


    - name: Sending Master Node Host IPv4 Address To Control Node For Later Use in Slave Configuration
      run_once: yes
      fetch: src=/home/ec2-user/ipv4_master1.txt dest=buffer/ flat=yes
      when: "inventory_hostname == 'ec2-54-91-112-111.compute-1.amazonaws.com'"


    - name: Verify Master Status
      shell: sudo mysql -te "SHOW MASTER STATUS"
      register: status
    - debug:
        var: status.stdout_lines


    - name: Show databases
      shell: sudo mysql -te "SHOW DATABASES"
      register: db
    - debug:
        var: db.stdout_lines
