---
- name: Setup Slave MariaDB server and Enable Replication on Master1
  hosts: slave
  become: yes
  become_method: sudo
  remote_user: ec2-user
  tasks:
    - name: Get latest Linux package updates
      ansible.builtin.yum:
        update_cache: yes


    - name: Install mariadb
      ansible.builtin.yum:
        name: mariadb-server
        state: present


    - name: Start mariadb service
      command: sudo systemctl start mariadb


    - name: Enable mariadb service
      command: sudo systemctl enable mariadb


    - name: Install python3-pip
      ansible.builtin.yum:
        name: python3-pip
        state: present


    - name: Install PyMySQL
      ansible.builtin.pip:
        name: PyMySQL
        state: present


    - name: Install pexpect
      ansible.builtin.pip:
        name: pexpect
        state: present


    - name: Secure mariadb installation
      expect:
        command: sudo mysql_secure_installation
        responses:
          'Enter current password for root \(enter for none\):': "\n"
          'Switch to unix_socket authentication \[Y/n\]': n
          'Change the root password\? \[Y/n\]': "y"
          'New password:': "{{mysql_pass}}"
          'Re-enter new password:': "{{mysql_pass}}"
          'Remove anonymous users\? \[Y/n\]': "y"
          'Disallow root login remotely\? \[Y/n\]': "n"
          'Remove test database and access to it\? \[Y/n\]': "y"
          'Reload privilege tables now\? \[Y/n\]': "y"
        echo: yes



    - name: Add [mysqld] on /etc/my.cnf
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        line: "[mysqld]"
        create: yes


    - name: Change the bind-address from localhost to 0.0.0.0 on /etc/my.cnf
      replace:
        path: "/etc/my.cnf"
        regexp: "127.0.0.1"
        replace: "0.0.0.0"
        backup: yes


    - name: Add server-id information on /etc/my.cnf
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        line: "server-id=3"
        create: yes


    - name: Add log_bin information on /etc/my.cnf
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        line: "log_bin=mysql-bin"
        create: yes


    - name: Add max_binlog_size information on /etc/my.cnf
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        line: "binlog-format=ROW"
        create: yes


    - name: Restart mariadb service
      command: sudo systemctl restart mariadb


    - name: Verify mariadb application is listening on TCP port 3306
      shell: sudo ss -l -n -p | egrep "Netid|:3306"
      register: mysql
    - debug:
        var: mysql.stdout_lines


    - name: Fetching Binary Log Filename Data From Control Node
      copy: src=buffer/binlog_name_master1.txt dest=/home/ec2-user
      when: "inventory_hostname == 'ec2-3-87-59-239.compute-1.amazonaws.com'"


    - name: Retrieved Binary Log Filename Data
      command: cat /home/ec2-user/binlog_name_master1.txt
      register: BinaryLogFileName
    - debug:
        var: BinaryLogFileName.stdout
    - set_fact:
        binname1: "{{BinaryLogFileName.stdout}}"
    

    - name: Fetching Binary Log Position Data From Control Node
      copy: src=buffer/binlog_position_master1.txt dest=/home/ec2-user
      when: "inventory_hostname == 'ec2-3-87-59-239.compute-1.amazonaws.com'"


    - name: Retrieved Binary Log Position Data
      command: cat /home/ec2-user/binlog_position_master1.txt
      register: BinaryLogPosition
    - debug:
        var: BinaryLogPosition.stdout
    - set_fact:
        binpos1: "{{BinaryLogPosition.stdout}}"


    - name: Fetching MasterNode IPv4 Address From Control Node
      run_once: yes
      copy: src=buffer/ipv4_master1.txt dest=/home/ec2-user
      when: "inventory_hostname == 'ec2-3-87-59-239.compute-1.amazonaws.com'"


    - name: Retrieved MasterNode IPv4 Address
      command: cat /home/ec2-user/ipv4_master1.txt
      register: MasterNodeIPV4
    - debug:
        var: MasterNodeIPV4.stdout
    - set_fact:
        ipadd1: "{{MasterNodeIPV4.stdout}}"

    
    - name: Fetching Binary Log Filename Data From Control Node
      copy: src=buffer/binlog_name_master2.txt dest=/home/ec2-user
      when: "inventory_hostname == 'ec2-3-87-59-239.compute-1.amazonaws.com'"


    - name: Retrieved Binary Log Filename Data
      command: cat /home/ec2-user/binlog_name_master2.txt
      register: BinaryLogFileName
    - debug:
        var: BinaryLogFileName.stdout
    - set_fact:
        binname2: "{{BinaryLogFileName.stdout}}"
 

    - name: Fetching Binary Log Position Data From Control Node
      copy: src=buffer/binlog_position_master2.txt dest=/home/ec2-user
      when: "inventory_hostname == 'ec2-3-87-59-239.compute-1.amazonaws.com'"


    - name: Retrieved Binary Log Position Data
      command: cat /home/ec2-user/binlog_position_master2.txt
      register: BinaryLogPosition
    - debug:
        var: BinaryLogPosition.stdout
    - set_fact:
        binpos2: "{{BinaryLogPosition.stdout}}"


    - name: Fetching MasterNode IPv4 Address From Control Node
      run_once: yes
      copy: src=buffer/ipv4_master2.txt dest=/home/ec2-user
      when: "inventory_hostname == 'ec2-3-87-59-239.compute-1.amazonaws.com'"


    - name: Retrieved MasterNode IPv4 Address
      command: cat /home/ec2-user/ipv4_master2.txt
      register: MasterNodeIPV4
    - debug:
        var: MasterNodeIPV4.stdout
    - set_fact:
        ipadd2: "{{MasterNodeIPV4.stdout}}"


    - name: Stop Slave
      command: sudo mysql -e "STOP ALL SLAVES"
      register: status


    - name: Configuring and Setting Up Slave To Replicate Master Node 01
      mysql_replication:
        login_user: "root"
        login_password: "{{mysql_pass}}"
        connection_name: "app1"
        mode: changeprimary
        master_host: "{{ipadd1}}"
        master_user: "replication"
        master_password: "{{repl_pass}}"
        master_log_file: "{{binname1}}"
        master_log_pos: "{{binpos1|int}}"
   

    - name: Configuring and Setting Up Slave To Replicate Master Node 02
      mysql_replication:
        login_user: "root"
        login_password: "{{mysql_pass}}"
        connection_name: "app2"
        mode: changeprimary
        master_host: "{{ipadd2}}"
        master_user: "replication"
        master_password: "{{repl_pass}}"
        master_log_file: "{{binname2}}"
        master_log_pos: "{{binpos2|int}}"


    - name: Start Slave
      command: sudo mysql -e "START ALL SLAVES"
      register: status


    - name: Verify Slave Status
      shell: sudo mysql -e "SHOW ALL SLAVES STATUS\G" | egrep "row|Connection_name|Master_Host|Master_Port|Master_Log_File|Executed_log_entries|Read_Master_Log_Pos|Relay_Log_File|Slave_SQL_State|Slave_IO_State|Slave_IO_Running|Slave_SQL_Running|Slave_SQL_Running_State"
      register: status
    - debug:
        var: status.stdout_lines


    - name: Show databases
      shell: sudo mysql -te "SHOW DATABASES"
      register: db
    - debug:
        var: db.stdout_lines

  
    

    